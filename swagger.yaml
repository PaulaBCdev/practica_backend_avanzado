openapi: 3.0.4
info:
  title: NodeApp
  description: |-
    This is a small web application that aims to mimic a product buying and selling app.
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:3000
tags:
  - name: login
    description: Login to access your ptoducts
  - name: products
    description: Everything about your Products
paths:
  /api/login:
    post:
      tags:
        - login
      summary: Login to obtein a token.
      description: You can only access other endpoints with the token. You need to be logged in to access the token.
      requestBody:
        description: Login to access other endpoints
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successful operation
        "401":
          description: Invalid credentials
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/products:
    get:
      tags:
        - products
      summary: Show products list.
      description: Show every product owned by you.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - apiAuth: []
    post:
      tags:
        - products
      summary: Add a new ad to the store.
      description: Add a new ad to the store.
      requestBody:
        description: Create a new advert in the store
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ProductInput"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - apiAuth: []
  /api/products/{productId}:
    get:
      tags:
        - products
      summary: Find product by ID.
      description: Returns a single product owned by the logged-in user.
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - apiAuth: []

    put:
      tags:
        - products
      summary: Update product info.
      description: This can only be done if you're the product's owner and you're logged.
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: string
      requestBody:
        required: true
        description: Due to a bug, press 'Reset' for the endpoint to function correctly.
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Product not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - apiAuth: []
    delete:
      tags:
        - products
      summary: Delete product.
      description: This can only be done by the owner that is logged.
      parameters:
        - name: productId
          in: path
          description: ID of the product to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product deleted
        "404":
          description: Invalid ID
        "401":
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - apiAuth: []
components:
  schemas:
    User:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: example@example.com
        password:
          type: string
          format: password
          example: "12345"
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        owner:
          type: string
        price:
          type: number
        image:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        __v:
          type: integer
          example: 0
    ProductInput:
      type: object
      required:
        - name
        - price
        - tags
      properties:
        name:
          type: string
        price:
          type: number
        tags:
          type: array
          minItems: 1
          items:
            type: string
            enum:
              - gaming
              - clothes
              - toys
              - others
        image:
          type: string
          nullable: true
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
        price:
          type: number
          nullable: true
        tags:
          type: array
          items:
            type: string
            enum:
              - gaming
              - clothes
              - toys
              - others
          nullable: true
        image:
          type: string
          nullable: true

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    apiAuth:
      type: apiKey
      name: Authorization
      in: header
